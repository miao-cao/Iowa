function checkBehavior_IowaCFS(tmpSUB,PLOT)
% Plot behavioral results for the CFS paradigm, both for single and
% multiple subjects. Single: plots the number of trials per visibility
% level for each contrast. Multiple: plots percentage correct per
% visibility level. Stats across multiple subjects.
%
% INPUT
% subID: Cell with one or multiple subject IDs
% PLOT: structure with plotting settings.

if nargin<1
    tmpSUB = {'153'};
end

if nargin<2
    PLOT.visible = 'on';
    PLOT.printPNG = 1;
    PLOT.printEPS = 1;
end

nSub = numel(tmpSUB);

visCorrectPercent   = zeros(nSub,4);
nContrast           = zeros(1,nSub);
correctAcrossSes    = zeros(nSub,4);
figureSettings


for iSub = 1:nSub
    clear correctLabel stimCont
    nTrials = struct([]);
    %% load data and determine the number of contrasts used across sessions
    subID = tmpSUB{iSub};
    subSpecs_IowaCFS
    for iSession =1:SUB.nSession
        Beh{iSub,iSession} = load([DIR.beh SUB.logFile{iSession}]);
        try % subjects 147-168
            stimCont{iSession} = Beh{iSub,iSession}.FaceContrast;
        catch % subject 178
            stimCont{iSession} = Beh{iSub,iSession}.S.vStimCont;
        end
    end
    
    contrasts = stimCont{1};
    if SUB.nSession>1
        for iSession=1:SUB.nSession-1
            contrasts = [contrasts stimCont{iSession+1}];
            contrasts = unique(contrasts);
        end
    else
        contrasts = unique(contrasts);
    end
    nContrast(iSub)=length(contrasts);
    
    %% Determine the number of trials per contrast and visibility level. Calculate the percentage correct per visibility level
    tmp_visCorrect      = zeros(length(Beh(iSub,:)),4);
    tmp_nTrialPerVis    = zeros(length(Beh(iSub,:)),4);
    for iSession=1:SUB.nSession
        for iContrast = 1:3; %only 3 contrasts per session
           
            for iVis = 1:4
                nTrials(iSession).cont(iContrast).vis(iVis)  = length(find(ismember(find(Beh{iSession}.vStimCont==iContrast),find(Beh{iSession}.visibility_resp==iVis))));
                tmp_visCorrect(iSession,iVis)                = length(find(ismember(find(Beh{iSub,iSession}.visibility_resp==iVis),find(Beh{iSub,iSession}.correct_stim_responses==1))));
                tmp_nTrialPerVis(iSession,iVis)              = length(find(Beh{iSub,iSession}.visibility_resp==iVis));
            end
            nTrials(iSession).cont(iContrast).corr       = length(find(ismember(find(Beh{iSub,iSession}.vStimCont==iContrast),find(Beh{iSub,iSession}.correct_stim_responses==1))));
        end
    end
    tmp_nTrialPerVis = sum(tmp_nTrialPerVis,1);
    tmp_visCorrect = sum(tmp_visCorrect,1);
    
    visCorrectPercent(iSub,:) = (tmp_visCorrect./tmp_nTrialPerVis)*100;
    
    %%
    clear correct cont
    cont = zeros(SUB.nSession,nContrast(iSub),4);
    
    [minCont,tmp] = min([stimCont{:}]);%find smallest contrast
    minContSes = ceil(tmp/3); %only 3 contrasts per session

    for iSession=1:SUB.nSession
        if nContrast(iSub)>3
            if ismember(iSession,minContSes)
                contrast2save = 1:3;
            else
                contrast2save = 2:4;
            end
        else
            contrast2save = 1:3;
        end
        for iContrast=1:3
            correct(iSession,contrast2save(iContrast))=0;

            correct(iSession,contrast2save(iContrast)) = correct(iSession,contrast2save(iContrast))+nTrials(iSession).cont(iContrast).corr;
            for iVis = 1:4
                cont(iSession,contrast2save(iContrast),iVis) = cont(iSession,contrast2save(iContrast),iVis) + nTrials(iSession).cont(iContrast).vis(iVis);
            end
        end
    end
    cont = squeeze(sum(cont,1));
    nTrialsPerCont = sum(cont,2);
    if nContrast(iSub)==3
        correctAcrossSes(iSub,:) = [(sum(correct,1)./nTrialsPerCont') * 100 NaN];
    else
        correctAcrossSes(iSub,:) = (sum(correct,1)./nTrialsPerCont') * 100;
    end
    for iContrast = 1:nContrast(iSub)
        correctLabel{iContrast} = [num2str(round(correctAcrossSes(iSub,iContrast)))];
        if iContrast == nContrast(iSub)
            correctLabel{iContrast} = [correctLabel{iContrast} '%'];
        end
    end
    
    if nSub > 1
        subplot(ceil(nSub/2), ceil(nSub/2), iSub)
    else
        subplot(1,2,1)
    end
    
    hB = bar(1:nContrast(iSub),[cont(:,1), cont(:,2), cont(:,3), cont(:,4)],'stack','lineWidth',2);
    xtick = get(gca,'xtick');
    text(xtick-0.2,repmat(max(nTrialsPerCont)+SUB.nSession/2,1,nContrast(iSub))+1,correctLabel,'fontSize',10)
    title(subID)
    ylim([0 (max(nTrialsPerCont)+SUB.nSession*2)])
    ylabel('# trials')
    xlabel('contrast level')
    axis square
    colormap gray

end
if nSub > 1
    subplot(ceil(nSub/2), ceil(nSub/2), iSub+1)
else
    subplot(1,2,2)
end
LEGEND = {['visibility 1'],['visibility 2'],['visibility 3'],['visibility 4']};
legH = subplotLegend(gca,hB,LEGEND,'vertical');

% subplotLegend(hB,[],['visibility 1, ' num2str(visCorrectPercent(1)) ],['visibility 2, ' num2str(visCorrectPercent(2)) ],...
%     ['visibility 3, ' num2str(visCorrectPercent(3)) ],['visibility 4, ' num2str(visCorrectPercent(4)) ],'Location','EastOutside')

if nSub==1
    DIR.fig = [DIR.figBase filesep 'beh' filesep];
    if ~exist(DIR.fig,'dir')
        mkdir(DIR.fig)
    end
    savefilename = [subID '_' 'nSes(' num2str(SUB.nSession) ')_stack'];
else
    DIR.fig = [DIR.figBase filesep 'beh' filesep];
    if ~exist(DIR.fig,'dir')
        mkdir(DIR.fig)
    end
    
    savefilename=[];
    for iSub = 1:nSub
    savefilename = [tmpSUB{iSub} '_' 'nSes(' num2str(SUB.nSession) ')_stack'];
    end
end
figureSave

